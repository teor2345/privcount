# config for injector multi-round integration test

# only the tally server needs these
tally_server:
    counters: 'counters.bins.yaml' # path to a yaml file containing our counter bin configurations
    # Either noise or sigmas must be provided (if noise is present, sigmas is ignored)
    noise: 'counters.noise.yaml' # path to a yaml file containing noise allocation parameters
    #sigmas: 'counters.sigmas.yaml' # path to a yaml file containing pre-calculated sigmas
    # The following two traffic model keys are only required if we want to enable traffic model learning
    # The traffic_model file specifies the actual model in the format that PrivCount requires.
    # From this model, PrivCount will extract all of the counters that are necessary to count
    # in order to learn the model, and the asociated bins config.
    traffic_model: 'traffic.model.json' # path to the traffic model, if we want to learn
    # The traffic_noise file specifies the noise parameters for all of the counters in a special
    # template style notation that will be expanded by PrivCount to cover all of the counters that
    # are required to count the model.
    traffic_noise: 'traffic.noise.yaml' # path to file specifying counter key templates and noise parameters
    # path to a yaml file where the noise allocation is written immediately after calculation. The noise allocation also forms part of the results context.
    allocation: 'counters.allocation.yaml'
    noise_weight: # distribute noise among all machines / data collectors
        # The tor relay fingerprints must be quoted, as some start with 0-9
        # This is the hard-coded fingerprint from the injector
        # Comment it out to test the missing fingerprint failure case
        'FACADE0000000000000000000123456789ABCDEF': 1.0
        # This fingerprint is not present on the test data collector,
        # it should be ignored
        '3DEADBEEF012345678900000000000000DEADC00': 1.0
        # * means 'any other relay', and should only be used for testing
        # (we know the injector's hard-coded fingerprint)
        # '*': 1.0
    listen_port: 20001 # open port on which to listen for remote connections from SKs and DCs
    # number of share keeper nodes required before starting
    # Template value, replaced by run_test.sh
    sk_threshold: PRIVCOUNT_SHARE_KEEPERS
    #sk_threshold: 1
    dc_threshold: 1 # number of data collector nodes required before starting
    # The elapsed test time is approximately:
    #     (collect_period + 2*event_period + delay_period) * rounds
    collect_period: 10 # (no default, 1 week = 604800 seconds) the safe time frame of stats collection for all stats
    # There must be at least two event periods in each collect period
    event_period: 5 # (default: 60 seconds) how often the TS event loop runs
    # There must be at least two checkin periods in each collect period
    # The checking period should also be less than or equal to the event
    # period, unless you are willing to wait a while for client status updates
    checkin_period: 5 # (default: 60 seconds) number of seconds clients should wait before checking with TS for updates
    delay_period: 0 # (default: 1 day = 86400 seconds) the number of seconds of enforced delay between rounds that change noise allocations. User activity shorter than this period is protected under differential privacy.
    always_delay: True # (default: False) always enforce the delay period between collection rounds, regardless of whether the noise allocation has changed. Intended for use when testing.
    #sigma_decrease_tolerance: 1.0e-6 # (default: 1.0e-6) the sigma value decrease that the node will tolerate before enforcing a delay
    continue: 2 # start another collection phase after finishing a previous collection phase. If this value is an integer, run that many rounds before stopping. (The TS always runs at least 1 round.)
    circuit_sample_rate: 1.0 # must be between 0.0 and 1.0. Smaller values sample fewer circuits. The injector ignores this option.
    max_cell_events_per_circuit: 25 # Limit cells from Tor. Can be negative to receive all cells from Tor. The injector ignores this option.
    # optional overrides:
    key: 'keys/ts.pem' # path to the rsa private key
    cert: 'keys/ts.cert' # path to the public key certificate
    #results: '.' # path to directory where the result files will be written
    #
    # the security of each PrivCount deployment depends on the handshake key
    # being unique, random, and secret
    # all nodes must agree on this key to handshake correctly
    # if the key file does not exist, the TS creates a file with a random key
    secret_handshake: 'keys/secret_handshake.yaml'

# only the share keepers need these
share_keeper:
    # Template values, replaced by run_test.sh
    # path to the rsa private key (optional)
    key: 'keys/sk.SK_NUM.pem'
    tally_server_info: # where the tally server is located
        ip: '127.0.0.1'
        port: 20001
    # optional overrides:
    delay_period: 2 # (default: 1 day = 86400 seconds) the number of seconds of enforced delay between rounds that change noise allocations. User activity shorter than this period is protected under differential privacy.
    always_delay: True # (default: False) always enforce the delay period between collection rounds, regardless of whether the noise allocation has changed. Intended for use when testing.
    sigma_decrease_tolerance: 1.0e-6 # (default: 1.0e-6) the sigma value decrease that the node will tolerate before enforcing a delay
    # all nodes must agree on this key to handshake correctly
    secret_handshake: 'keys/secret_handshake.yaml'

# only the data collectors need these
data_collector:
    name: 'dc-inject-test' # a unique, human meaningful name for debugging
    # the Tor control connection from which we will receive events
    # Can be:
    # - port, with ip optional (default 127.0.0.1), or
    # - a unix socket path
    # Only choose one connection method: using multiple methods risks receiving
    # duplicate events. (We use multiple methods to ensure that both methods
    # work during testing.)
    event_source:
        port: 20003
        #ip: 127.0.0.1 # optional (default 127.0.0.1), use ::1 for IPv6
        unix: '/tmp/privcount-inject' # control socket path. Tor defaults to /var/run/tor/control in many common distributions.
        control_password: 'keys/control_password.txt'
        # cat /dev/random | hexdump -e '"%x"' -n 32 -v
        # tor --hash-password
        # Add HashedControlPassword to torrc
    tally_server_info: # where the tally server is located
        ip: 127.0.0.1
        port: 20001
    # share keepers' public key hashes
    # `openssl rsa -pubout < keys/sk.pem | openssl dgst -sha256`
    share_keepers:
        # Template list value, replaced by run_test.sh
        - SK_LIST
        # - '0e193e4a66cf0332bc64ad613bb651579a10e08afdbb54aa49e9ea2286ccd41c'
        # - ...
    # optional overrides:
    #use_setconf: True (default: True) whether to use SETCONF to set EnablePrivCount, or rely on the torrc or some other PrivCount instance to do it. This biases results towards long-running connections. Intended for use when testing.
    #delay_period: 4 # (default: 1 day = 86400 seconds) the number of seconds of enforced delay between rounds that change noise allocations. User activity shorter than this period is protected under differential privacy.
    #always_delay: True # (default: False) always enforce the delay period between collection rounds, regardless of whether the noise allocation has changed. Intended for use when testing.
    rotate_period: 1 # (default: 600) sensitive data (like client IP addresses) remains in memory for up to 2*rotate_period
    #sigma_decrease_tolerance: 1.0e-6 # (default: 1.0e-6) the sigma value decrease that the node will tolerate before enforcing a delay
    # all nodes must agree on this key to handshake correctly
    secret_handshake: 'keys/secret_handshake.yaml'
